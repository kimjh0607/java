@추상메서드
메서드의 선언만 있고 구현이 없는 메서드.
추상 메서드는 추상클래스나 인터페이스에 포함되어 있으며
해당클래스나 인터페이스를 상속받거나 구현하는 클래스에서
이 메서드를 반드시 구현해야 한다.

@인터페이스
클래스에 어떤 메서드를 반드시 구현하도록 요구하는 일종의 규약이다.
인터페이스를 통해 여러 클래스가 같은 메서드를 공유할 수 있다.
인터페이스는 다중 상속과 비슷한 효과를 얻을 수 있다.
인터페이스를 구현하는 클래스는 인터페이스에 정의된 모든 메서드를
구현해야 한다.

@추상클래스
완전한 기능을 가지지않고 하나 이상의 추상메서드를 포함하는 클래스.
추상 클래스는 직접 인스턴스화 할수 없으며 다른클래스가 이를 상속하여
추상메서드를 구현해야 사용할 수 있습니다. 추상클래스는 공통기능을
제공하면서 상속받는 클래스들에게 특정 메서드의 구현을 강제할 수 있다.

@추상클래스와 인터페이스의 차이점
추상클래스는 일반메서드와 변수를 가질수 있지만,
인터페이스는 모든 메서드가 추상메서드이어야 하며,
변수는 반드시 상수이어야 한다.

@람다식
함수형 인터페이스를 표현하는 간결한 방법.
코드를 짧고 가독성 있게 작성할 수 있다.
람다식은 주로 매개변수로 함수를 전달하거나, 함수를 변수에
저장하거나 반환하는 경우에 사용된다.

@스트림
컬렉션이나 배열등의 데이터를 효율적이고 간결하게 처리할 수 있다.
주로 다음과 같은 역할과 기능을 제공한다.
1. 중간연산 - 여러종료의 중간연산을 통해 원본데이터를 변환하거나
필터링할수 있다. 연쇄가능하며 여러연산을 순차적으로 적용할 수있다.
에시로는  filter map flatMap등이 있다.
2. 최종연산 - 최종연산을 통해 변환된 데이터를 요약 검생 맵핑 할수있다.
예시로는  forEach toArray reduce collect등이 있다.
3. 병렬처리 -  스트림을 사용하면 데이터를 쉽게 병렬처리가능하다
이를 통해 멀티코어CPU를 최대한 활용, 성능을 향상시킬 수 있다.

@함수형 인터페이스
정확히 하나의 추상 메서드를 가진 인터페이스를 의미한다.
java.util.function 패키지에 다양한 기본 함수형 인터페이스를 제공한다.
Consumer Supplier Function Predicate 등이 그 예이다.

@익명클래스